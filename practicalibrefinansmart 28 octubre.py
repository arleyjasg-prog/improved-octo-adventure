# -*- coding: utf-8 -*-
"""
FinanSmart - An√°lisis de Portafolio de Inversi√≥n
Aplicaci√≥n Streamlit para an√°lisis financiero
"""

import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="FinanSmart - An√°lisis de Portafolio",
    page_icon="üìä",
    layout="wide"
)

# T√≠tulo principal
st.title("üìä FinanSmart - An√°lisis de Portafolio de Inversi√≥n")
st.markdown("---")

# Sidebar para configuraci√≥n
st.sidebar.header("‚öôÔ∏è Configuraci√≥n")

# Selecci√≥n de tickers
default_tickers = ["AAPL", "MSFT", "AMZN", "GOOGL", "META"]
tickers_input = st.sidebar.text_input(
    "Tickers (separados por comas)",
    value=",".join(default_tickers)
)
tickers = [t.strip().upper() for t in tickers_input.split(",")]

# Selecci√≥n de fechas
col1, col2 = st.sidebar.columns(2)
with col1:
    start_date = st.date_input("Fecha inicio", value=pd.to_datetime("2020-01-01"))
with col2:
    end_date = st.date_input("Fecha fin", value=pd.to_datetime("2023-12-31"))

# N√∫mero de simulaciones
num_portfolios = st.sidebar.slider(
    "N√∫mero de simulaciones",
    min_value=1000,
    max_value=50000,
    value=10000,
    step=1000
)

# Bot√≥n para ejecutar an√°lisis
if st.sidebar.button("üöÄ Ejecutar An√°lisis", type="primary"):
    
    with st.spinner("Descargando datos..."):
        try:
            # Descarga de datos
            data = yf.download(tickers, start=start_date, end=end_date, progress=False)['Close']
            
            if data.empty:
                st.error("No se pudieron descargar datos. Verifica los tickers y las fechas.")
                st.stop()
            
            st.success("‚úÖ Datos descargados exitosamente")
            
            # Secci√≥n 1: Datos descargados
            st.header("1Ô∏è‚É£ Datos Hist√≥ricos de Precios")
            st.dataframe(data.head(10), use_container_width=True)
            
            # Gr√°fico de evoluci√≥n de precios
            st.subheader("Evoluci√≥n de Precios Ajustados")
            fig1, ax1 = plt.subplots(figsize=(12, 6))
            data.plot(ax=ax1)
            ax1.set_title('Evoluci√≥n de precios ajustados')
            ax1.set_xlabel('Fecha')
            ax1.set_ylabel('Precio ($)')
            ax1.legend(loc='best')
            ax1.grid(True, alpha=0.3)
            st.pyplot(fig1)
            
            # C√°lculo de retornos
            returns = data.pct_change().dropna()
            
            # Secci√≥n 2: Retornos
            st.header("2Ô∏è‚É£ An√°lisis de Retornos Diarios")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Estad√≠sticas Descriptivas")
                st.dataframe(returns.describe(), use_container_width=True)
            
            with col2:
                st.subheader("Retornos Diarios")
                fig2, ax2 = plt.subplots(figsize=(10, 6))
                returns.plot(ax=ax2, alpha=0.7)
                ax2.set_title('Retornos diarios')
                ax2.set_xlabel('Fecha')
                ax2.set_ylabel('Retorno')
                ax2.legend(loc='best')
                ax2.grid(True, alpha=0.3)
                st.pyplot(fig2)
            
            # Secci√≥n 3: Correlaci√≥n
            st.header("3Ô∏è‚É£ Matriz de Correlaci√≥n")
            fig3, ax3 = plt.subplots(figsize=(10, 8))
            sns.heatmap(returns.corr(), annot=True, cmap='coolwarm', ax=ax3, center=0)
            ax3.set_title('Matriz de correlaci√≥n del portafolio')
            st.pyplot(fig3)
            
            # C√°lculo de m√©tricas anualizadas
            mean_returns = returns.mean() * 252
            risk = returns.std() * np.sqrt(252)
            
            # Secci√≥n 4: M√©tricas
            st.header("4Ô∏è‚É£ M√©tricas de Riesgo y Retorno Anualizadas")
            metrics_df = pd.DataFrame({
                'Rendimiento Anual': mean_returns,
                'Riesgo (Volatilidad)': risk
            })
            st.dataframe(metrics_df.style.format("{:.2%}"), use_container_width=True)
            
            # Portafolio con pesos iguales
            st.subheader("Portafolio con Pesos Iguales")
            weights_equal = np.array([1/len(tickers)] * len(tickers))
            portfolio_return = np.dot(weights_equal, mean_returns)
            portfolio_risk = np.sqrt(np.dot(weights_equal.T, np.dot(returns.cov() * 252, weights_equal)))
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Rendimiento Esperado", f"{portfolio_return:.2%}")
            with col2:
                st.metric("Riesgo (Volatilidad)", f"{portfolio_risk:.2%}")
            
            # Secci√≥n 5: Simulaci√≥n Monte Carlo
            st.header("5Ô∏è‚É£ Simulaci√≥n de Portafolios (Monte Carlo)")
            
            with st.spinner(f"Simulando {num_portfolios:,} portafolios..."):
                results = np.zeros((3, num_portfolios))
                
                for i in range(num_portfolios):
                    weights = np.random.random(len(tickers))
                    weights /= np.sum(weights)
                    
                    ret = np.dot(weights, mean_returns)
                    risk_calc = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))
                    sharpe = ret / risk_calc if risk_calc != 0 else 0
                    
                    results[0, i] = risk_calc
                    results[1, i] = ret
                    results[2, i] = sharpe
            
            # Gr√°fico de frontera eficiente
            st.subheader("Frontera Eficiente")
            fig4, ax4 = plt.subplots(figsize=(12, 8))
            scatter = ax4.scatter(
                results[0, :],
                results[1, :],
                c=results[2, :],
                cmap='viridis',
                alpha=0.5,
                s=10
            )
            ax4.set_xlabel('Riesgo (Volatilidad)')
            ax4.set_ylabel('Retorno Esperado')
            ax4.set_title('Frontera Eficiente Simulada')
            plt.colorbar(scatter, label='√çndice de Sharpe', ax=ax4)
            ax4.grid(True, alpha=0.3)
            
            # Marcar el portafolio √≥ptimo
            max_sharpe_idx = np.argmax(results[2])
            ax4.scatter(
                results[0, max_sharpe_idx],
                results[1, max_sharpe_idx],
                c='red',
                s=200,
                marker='*',
                edgecolors='black',
                label='Portafolio √ìptimo'
            )
            ax4.legend()
            st.pyplot(fig4)
            
            # Portafolio √≥ptimo
            st.subheader("üèÜ Portafolio √ìptimo (M√°ximo Sharpe)")
            mejor_riesgo, mejor_retorno, mejor_sharpe = results[:, max_sharpe_idx]
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("√çndice de Sharpe", f"{mejor_sharpe:.2f}")
            with col2:
                st.metric("Retorno Esperado", f"{mejor_retorno:.2%}")
            with col3:
                st.metric("Riesgo Asociado", f"{mejor_riesgo:.2%}")
            
            # Exportar resultados
            st.header("6Ô∏è‚É£ Exportar Resultados")
            df_resultados = pd.DataFrame(
                results.T,
                columns=['Riesgo', 'Retorno', 'Sharpe']
            )
            
            csv = df_resultados.to_csv(index=False)
            st.download_button(
                label="üì• Descargar resultados CSV",
                data=csv,
                file_name="resultados_portafolio.csv",
                mime="text/csv"
            )
            
            st.dataframe(df_resultados.head(10), use_container_width=True)
            
        except Exception as e:
            st.error(f"‚ùå Error al procesar los datos: {str(e)}")
            st.info("Verifica que los tickers sean v√°lidos y que haya datos disponibles para el rango de fechas seleccionado.")

else:
    st.info("üëà Configura los par√°metros en el panel lateral y presiona 'Ejecutar An√°lisis'")
    
    # Mostrar informaci√≥n de ayuda
    with st.expander("‚ÑπÔ∏è Informaci√≥n sobre la aplicaci√≥n"):
        st.markdown("""
        ### ¬øQu√© hace esta aplicaci√≥n?
        
        Esta aplicaci√≥n realiza un an√°lisis completo de portafolio de inversi√≥n utilizando:
        
        1. **Descarga de datos hist√≥ricos** de precios de acciones usando Yahoo Finance
        2. **C√°lculo de retornos diarios** y m√©tricas estad√≠sticas
        3. **An√°lisis de correlaci√≥n** entre activos
        4. **Simulaci√≥n Monte Carlo** de miles de portafolios posibles
        5. **Identificaci√≥n del portafolio √≥ptimo** seg√∫n el √≠ndice de Sharpe
        
        ### ¬øC√≥mo usar?
        
        1. Ingresa los tickers de las acciones (ej: AAPL, MSFT, GOOGL)
        2. Selecciona el rango de fechas
        3. Ajusta el n√∫mero de simulaciones
        4. Presiona "Ejecutar An√°lisis"
        5. Descarga los resultados en CSV
        
        ### √çndice de Sharpe
        
        Mide el retorno ajustado por riesgo. Un valor m√°s alto indica mejor relaci√≥n riesgo-retorno.
        """)

# Footer
st.markdown("---")
st.markdown("Desarrollado con ‚ù§Ô∏è usando Streamlit | Datos: Yahoo Finance")
