# -*- coding: utf-8 -*-
"""Copia de institucional_grupo10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fC64BEbuJOFD6Z0fvuBt8uFVfKFwM3bI
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

#Importamos las librerias
import streamlit as st
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

st.markdown(
    """
    <h1 style='text-align: center; color: #1E90FF;'>
        BIENVENIDOS AL GRUPO 10 💼
    </h1>""",
    unsafe_allow_html=True)

st.header("Análisis de Rentabilidad y Riesgo 📊")
st.write("""Este proyecto analiza el comportamiento financiero de tres grandes empresas.
        A través de indicadores como la rentabilidad esperada, la volatilidad y el Ratio de Sharpe,
        evaluamos la relación entre riesgo y retorno para identificar el portafolio más eficiente.""")
st.mardown("---")

#tickter inicial
lista_tickers = ["AAPL","MSFT","NVDA","META"]

#multiselector
ticker=st.multiselect("Elija un ticker",lista_tickers)

"""Multiselect: te permite elegir las empresas que quieres analizar."""

# Imagen decorativa
st.image("https://cdn.pixabay.com/photo/2017/06/16/07/37/stock-exchange-2408858_1280.jpg",use_container_width=True)

#  Botón para calcular rentabilidad y riesgo

if st.button("Calcular Rentabilidad y Riesgo"):
    if not ticker:
        st.warning("Selecciona al menos una empresa para continuar.")
    else:
        # Descargar datos históricos
        data = yf.download(tickers=ticker, period="6mo")["Close"]

        # Calcular rentabilidades diarias
        rent_diaria = data.pct_change().dropna()

        # Calcular métricas
        rent_promedio = rent_diaria.mean() * 252  # anualizada
        riesgo = rent_diaria.std() * (252 ** 0.5)  # desviación estándar anualizada
        sharpe = rent_promedio / riesgo

        # Crear DataFrame resumen
        resumen = pd.DataFrame({
            "Rentabilidad esperada (%)": rent_promedio * 100,
            "Riesgo (Volatilidad %)": riesgo * 100,
            "Ratio Sharpe": sharpe
        })

        # Mostrar resultados
        st.subheader(" Comparación de Empresas:")
        st.dataframe(resumen.style.format("{:.2f}"))

        #Gráfico de comparación
        st.subheader("Gráfico de Rentabilidad vs Riesgo")
        fig, ax = plt.subplots()
        ax.scatter(riesgo * 100, rent_promedio * 100, color="blue")

        for i, txt in enumerate(resumen.index):
            ax.annotate(txt, (riesgo[i] * 100, rent_promedio[i] * 100))

        ax.set_xlabel("Riesgo (Volatilidad %)")
        ax.set_ylabel("Rentabilidad Esperada (%)")
        ax.set_title("Rendimiento vs Riesgo")
        st.pyplot(fig)
else:
    st.info("Presiona el botón para analizar la rentabilidad y riesgo de las empresas seleccionadas.")
